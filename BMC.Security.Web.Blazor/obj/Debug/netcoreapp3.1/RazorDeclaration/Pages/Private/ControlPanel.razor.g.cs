#pragma checksum "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\Pages\Private\ControlPanel.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "aa05daedb448d4dd66411589066b48e43cf4b49f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BMC.Security.Web.Blazor.Pages.Private
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using BMC.Security.Web.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using BMC.Security.Web.Blazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\Pages\Private\ControlPanel.razor"
using BMC.Security.Web.Blazor.Helpers;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/controlpanel")]
    public partial class ControlPanel : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 156 "C:\Jobs\KLEIN\BMC.Security.Web.Blazor\BMC.Security.Web.Blazor\Pages\Private\ControlPanel.razor"
       
    MqttService iot;

    string TxtInterval = string.Empty;
    bool DrainRelay1 = false;
    bool DrainRelay2 = false;
    bool DrainRelay3 = false;
    bool DrainRelay4 = false;
    bool DrainRelay5 = false;
    bool DrainRelay6 = false;
    bool DrainRelay7 = false;
    bool DrainRelay8 = false;
    bool DrainRelay9 = false;
    bool DrainRelay10 = false;
    bool DrainRelay11 = false;
    bool DrainRelay12 = false;
    bool DrainRelay13 = false;
    bool DrainRelay14 = false;

    protected override async Task OnInitializedAsync()
    {
        iot = new MqttService();
    }

    async Task DoAction(string commandName, string argument = "")
    {
        switch (commandName)
        {
            case "Monster":
                await iot.InvokeMethod("BMCSecurityBot", "PlaySound", new string[] { "monster.mp3" });
                break;
            case "Scream":
                await iot.InvokeMethod("BMCSecurityBot", "PlaySound", new string[] { "scream.mp3" });
                break;
            case "Tornado":
                await iot.InvokeMethod("BMCSecurityBot", "PlaySound", new string[] { "tornado.mp3" });
                break;
            case "Police":
                await iot.InvokeMethod("BMCSecurityBot", "PlaySound", new string[] { "police.mp3" });
                break;
            case "LEDON":
                await iot.InvokeMethod("BMCSecurityBot", "ChangeLED", new string[] { "RED" });
                break;
            case "LEDOFF":
                await iot.InvokeMethod("BMCSecurityBot", "TurnOffLED", new string[] { "" });
                break;
            case "DEVICEON":
                {
                    //string DeviceID = $"Device{btn.CommandArgument}IP";
                    string URL = $"http://{ argument }/cm?cmnd=Power%20On";
                    await iot.InvokeMethod("BMCSecurityBot", "OpenURL", new string[] { URL });
                }
                break;
            case "DEVICEOFF":
                {
                    //string DeviceID = $"Device{btn.CommandArgument}IP";
                    string URL = $"http://{ argument }/cm?cmnd=Power%20Off";
                    await iot.InvokeMethod("BMCSecurityBot", "OpenURL", new string[] { URL });
                }
                break;
            case "CCTVStatus":
                await iot.InvokeMethod("CCTV_Watcher", "CCTVStatus", new string[] { argument });
                break;
            case "CCTVUpdateTime":
                var interval = string.IsNullOrEmpty(TxtInterval) ? "10" : TxtInterval;
                await iot.InvokeMethod("CCTV_Watcher", "CCTVUpdateTime", new string[] { interval });

                break;
            case "Relay1":
                await iot.InvokeMethod2("bmc/hidroponic/control", "Relay1", new string[] { argument });
                break;
            case "Relay2":
                await iot.InvokeMethod2("bmc/hidroponic/control", "Relay2", new string[] { argument });
                break;
            case "WaterIn":
                await iot.InvokeMethod("BMCSecurityBot", "OpenURL", new string[] { argument });
                break;
            case "WaterOut":
                await iot.InvokeMethod("BMCSecurityBot", "OpenURL", new string[] { argument });
                break;

            case "RelayAqua1":
                await iot.InvokeMethod2("bmc/aquaponic/control", "Relay1", new string[] { argument });
                break;
            case "RelayAqua2":
                await iot.InvokeMethod2("bmc/aquaponic/control", "Relay2", new string[] { argument });
                break;
            case "DraineageOn":
                // neck
                //await iot.InvokeMethod3("bmc/autodrainage/relay16", "on");
                //await iot.InvokeMethod3("bmc/autodrainage/relay15", "off");

                // mouth
                if (DrainRelay1)
                    iot.InvokeMethod3("bmc/autodrainage/relay1", "on");
                if (DrainRelay2)
                    iot.InvokeMethod3("bmc/autodrainage/relay2", "on");
                if (DrainRelay3)
                    iot.InvokeMethod3("bmc/autodrainage/relay3", "on");
                if (DrainRelay4)
                    iot.InvokeMethod3("bmc/autodrainage/relay4", "on");
                if (DrainRelay5)
                    iot.InvokeMethod3("bmc/autodrainage/relay5", "on");
                if (DrainRelay6)
                    iot.InvokeMethod3("bmc/autodrainage/relay6", "on");
                if (DrainRelay7)
                    iot.InvokeMethod3("bmc/autodrainage/relay7", "on");
                if (DrainRelay8)
                    iot.InvokeMethod3("bmc/autodrainage/relay8", "on");
                if (DrainRelay9)
                    iot.InvokeMethod3("bmc/autodrainage/relay9", "on");
                if (DrainRelay10)
                    iot.InvokeMethod3("bmc/autodrainage/relay10", "on");
                if (DrainRelay11)
                    iot.InvokeMethod3("bmc/autodrainage/relay11", "on");
                if (DrainRelay12)
                    iot.InvokeMethod3("bmc/autodrainage/relay12", "on");
                if (DrainRelay13)
                    iot.InvokeMethod3("bmc/autodrainage/relay13", "on");
                if (DrainRelay14)
                    iot.InvokeMethod3("bmc/autodrainage/relay14", "on");
                break;
            case "DraineageOff":
                // neck
                await iot.InvokeMethod3("bmc/autodrainage/relay16", "off");

                // mouth
                if (DrainRelay1)
                    iot.InvokeMethod3("bmc/autodrainage/relay1", "off");
                if (DrainRelay2)
                    iot.InvokeMethod3("bmc/autodrainage/relay2", "off");
                if (DrainRelay3)
                    iot.InvokeMethod3("bmc/autodrainage/relay3", "off");
                if (DrainRelay4)
                    iot.InvokeMethod3("bmc/autodrainage/relay4", "off");
                if (DrainRelay5)
                    iot.InvokeMethod3("bmc/autodrainage/relay5", "off");
                if (DrainRelay6)
                    iot.InvokeMethod3("bmc/autodrainage/relay6", "off");
                if (DrainRelay7)
                    iot.InvokeMethod3("bmc/autodrainage/relay7", "off");
                if (DrainRelay8)
                    iot.InvokeMethod3("bmc/autodrainage/relay8", "off");
                if (DrainRelay9)
                    iot.InvokeMethod3("bmc/autodrainage/relay9", "off");
                if (DrainRelay10)
                    iot.InvokeMethod3("bmc/autodrainage/relay10", "off");
                if (DrainRelay11)
                    iot.InvokeMethod3("bmc/autodrainage/relay11", "off");
                if (DrainRelay12)
                    iot.InvokeMethod3("bmc/autodrainage/relay12", "off");
                if (DrainRelay13)
                    iot.InvokeMethod3("bmc/autodrainage/relay13", "off");
                if (DrainRelay14)
                    iot.InvokeMethod3("bmc/autodrainage/relay14", "off");
                break;
            case "DraineageFillOn":
                // neck
                await iot.InvokeMethod3("bmc/autodrainage/relay16", "off");
                await iot.InvokeMethod3("bmc/autodrainage/relay15", "on");

                // mouth
                if (DrainRelay1)
                    iot.InvokeMethod3("bmc/autodrainage/relay1", "on");
                if (DrainRelay2)
                    iot.InvokeMethod3("bmc/autodrainage/relay2", "on");
                if (DrainRelay3)
                    iot.InvokeMethod3("bmc/autodrainage/relay3", "on");
                if (DrainRelay4)
                    iot.InvokeMethod3("bmc/autodrainage/relay4", "on");
                if (DrainRelay5)
                    iot.InvokeMethod3("bmc/autodrainage/relay5", "on");
                if (DrainRelay6)
                    iot.InvokeMethod3("bmc/autodrainage/relay6", "on");
                if (DrainRelay7)
                    iot.InvokeMethod3("bmc/autodrainage/relay7", "on");
                if (DrainRelay8)
                    iot.InvokeMethod3("bmc/autodrainage/relay8", "on");
                if (DrainRelay9)
                    iot.InvokeMethod3("bmc/autodrainage/relay9", "on");
                if (DrainRelay10)
                    iot.InvokeMethod3("bmc/autodrainage/relay10", "on");
                if (DrainRelay11)
                    iot.InvokeMethod3("bmc/autodrainage/relay11", "on");
                if (DrainRelay12)
                    iot.InvokeMethod3("bmc/autodrainage/relay12", "on");
                if (DrainRelay13)
                    iot.InvokeMethod3("bmc/autodrainage/relay13", "on");
                if (DrainRelay14)
                    iot.InvokeMethod3("bmc/autodrainage/relay14", "on");
                break;
            case "DraineageFillOff":
                // neck
                await iot.InvokeMethod3("bmc/autodrainage/relay15", "off");

                // mouth
                if (DrainRelay1)
                    iot.InvokeMethod3("bmc/autodrainage/relay1", "off");
                if (DrainRelay2)
                    iot.InvokeMethod3("bmc/autodrainage/relay2", "off");
                if (DrainRelay3)
                    iot.InvokeMethod3("bmc/autodrainage/relay3", "off");
                if (DrainRelay4)
                    iot.InvokeMethod3("bmc/autodrainage/relay4", "off");
                if (DrainRelay5)
                    iot.InvokeMethod3("bmc/autodrainage/relay5", "off");
                if (DrainRelay6)
                    iot.InvokeMethod3("bmc/autodrainage/relay6", "off");
                if (DrainRelay7)
                    iot.InvokeMethod3("bmc/autodrainage/relay7", "off");
                if (DrainRelay8)
                    iot.InvokeMethod3("bmc/autodrainage/relay8", "off");
                if (DrainRelay9)
                    iot.InvokeMethod3("bmc/autodrainage/relay9", "off");
                if (DrainRelay10)
                    iot.InvokeMethod3("bmc/autodrainage/relay10", "off");
                if (DrainRelay11)
                    iot.InvokeMethod3("bmc/autodrainage/relay11", "off");
                if (DrainRelay12)
                    iot.InvokeMethod3("bmc/autodrainage/relay12", "off");
                if (DrainRelay13)
                    iot.InvokeMethod3("bmc/autodrainage/relay13", "off");
                if (DrainRelay14)
                    iot.InvokeMethod3("bmc/autodrainage/relay14", "off");
                break;
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
